<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Run Club - Your run club, your way</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        .map-container {
            height: 100%;
            background-color: #e5e7eb;
            position: relative;
            overflow: hidden;
        }
        .run-marker {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            transition: transform 0.2s;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }
        .run-marker:hover {
            transform: scale(1.1);
        }
        .run-marker.live {
            background-color: #ef4444;
        }
        .run-marker.planned {
            background-color: #0066cc;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useContext, createContext } = React;

        // Icons as simple SVG components
        const PlayIcon = () => (
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
        );

        const CalendarIcon = () => (
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
        );

        const MapPinIcon = () => (
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
            </svg>
        );

        const UsersIcon = () => (
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                <circle cx="9" cy="7" r="4"></circle>
                <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
        );

        const CheckIcon = () => (
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
        );

        const XIcon = () => (
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        );

        const PlusIcon = () => (
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
        );

        // Auth Context
        const AuthContext = createContext(null);

        const useAuth = () => {
            const context = useContext(AuthContext);
            if (!context) throw new Error('useAuth must be used within AuthProvider');
            return context;
        };

        const AuthProvider = ({ children }) => {
            const [user, setUser] = useState(null);
            
            const login = () => {
                setUser({
                    id: '1',
                    name: 'Alex Runner',
                    email: 'alex@example.com',
                    avatar: 'https://ui-avatars.com/api/?name=Alex+Runner&background=0066CC&color=fff',
                    paceMin: 240,
                    paceMax: 360,
                    preferredDistances: [5, 10]
                });
            };
            
            const logout = () => setUser(null);
            
            return (
                <AuthContext.Provider value={{ user, login, logout }}>
                    {children}
                </AuthContext.Provider>
            );
        };

        // Mock data
        const mockRuns = [
            {
                id: '1',
                userId: '2',
                userName: 'Sarah Chen',
                userAvatar: 'https://ui-avatars.com/api/?name=Sarah+Chen&background=FF4D4D&color=fff',
                paceSecPerKm: 300,
                distanceKm: 5,
                startTime: new Date(Date.now() + 3600000),
                durationMin: 30,
                wingIt: false,
                status: 'planned',
                meetingPoint: { lat: 51.5074, lng: -0.1278 },
                meetingPointName: 'Hyde Park Corner',
                maxParticipants: 4,
                participants: []
            },
            {
                id: '2',
                userId: '3',
                userName: 'Marcus Johnson',
                userAvatar: 'https://ui-avatars.com/api/?name=Marcus+Johnson&background=0066CC&color=fff',
                paceSecPerKm: 420,
                distanceKm: 10,
                startTime: new Date(Date.now() + 7200000),
                durationMin: 70,
                wingIt: true,
                status: 'planned',
                meetingPoint: { lat: 51.5033, lng: -0.1196 },
                meetingPointName: 'Westminster Bridge',
                maxParticipants: 3,
                participants: [{ userId: '4', status: 'accepted' }]
            },
            {
                id: '3',
                userId: '5',
                userName: 'Priya Patel',
                userAvatar: 'https://ui-avatars.com/api/?name=Priya+Patel&background=0066CC&color=fff',
                paceSecPerKm: 360,
                distanceKm: 8,
                startTime: new Date(Date.now() + 86400000),
                durationMin: 50,
                wingIt: false,
                status: 'planned',
                meetingPoint: { lat: 51.5145, lng: -0.0755 },
                meetingPointName: 'Victoria Park',
                maxParticipants: 6,
                participants: [{ userId: '6', status: 'accepted' }, { userId: '7', status: 'accepted' }]
            }
        ];

        // Utility functions
        const formatPace = (secPerKm) => {
            const mins = Math.floor(secPerKm / 60);
            const secs = secPerKm % 60;
            return `${mins}:${secs.toString().padStart(2, '0')}/km`;
        };

        const formatTime = (date) => {
            return new Intl.DateTimeFormat('en-GB', {
                hour: '2-digit',
                minute: '2-digit'
            }).format(date);
        };

        const formatDate = (date) => {
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            if (date.toDateString() === today.toDateString()) return 'Today';
            if (date.toDateString() === tomorrow.toDateString()) return 'Tomorrow';
            
            return new Intl.DateTimeFormat('en-GB', {
                weekday: 'short',
                day: 'numeric',
                month: 'short'
            }).format(date);
        };

        // Components
        const SafetyGate = ({ onAccept }) => {
            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 max-w-md mx-4">
                        <h2 className="text-2xl font-bold mb-4">Safety First</h2>
                        <p className="mb-4">By using The Run Club, you confirm:</p>
                        <ul className="list-disc list-inside mb-6 space-y-2">
                            <li>You are 16 years or older</li>
                            <li>You will meet in public places only</li>
                            <li>You run at your own risk</li>
                        </ul>
                        <div className="flex gap-3">
                            <button
                                onClick={() => window.close()}
                                className="px-4 py-2 text-gray-600 hover:text-gray-800"
                            >
                                Leave
                            </button>
                            <button
                                onClick={onAccept}
                                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                            >
                                I Understand
                            </button>
                        </div>
                    </div>
                </div>
            );
        };

        const LoginScreen = () => {
            const { login } = useAuth();
            
            return (
                <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                    <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full">
                        <h1 className="text-3xl font-bold mb-2">The Run Club</h1>
                        <p className="text-gray-600 mb-8">Your run club, your way.</p>
                        
                        <button
                            onClick={login}
                            className="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center justify-center gap-2"
                        >
                            Continue with Google
                        </button>
                        
                        <div className="mt-4 text-center">
                            <button className="text-blue-600 hover:underline text-sm">
                                Use email instead
                            </button>
                        </div>
                    </div>
                </div>
            );
        };

        const RunCard = ({ run, onJoin, onViewDetails }) => {
            const { user } = useAuth();
            const isOwner = user?.id === run.userId;
            const hasJoined = run.participants.some(p => p.userId === user?.id);
            const isFull = run.participants.filter(p => p.status === 'accepted').length >= run.maxParticipants - 1;
            
            return (
                <div className="bg-white p-4 rounded-lg shadow hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between mb-3">
                        <div className="flex items-center gap-3">
                            <img
                                src={run.userAvatar}
                                alt={run.userName}
                                className="w-10 h-10 rounded-full"
                            />
                            <div>
                                <p className="font-semibold">{run.userName}</p>
                                <p className="text-sm text-gray-600">
                                    {formatPace(run.paceSecPerKm)} • {run.distanceKm}km
                                </p>
                            </div>
                        </div>
                        <span className={`px-2 py-1 text-xs rounded ${
                            run.status === 'live' ? 'bg-red-100 text-red-600' : 'bg-blue-100 text-blue-600'
                        }`}>
                            {run.status === 'live' ? 'Running Now' : 'Planned'}
                        </span>
                    </div>
                    
                    <div className="space-y-2 mb-3">
                        <div className="flex items-center gap-2 text-sm text-gray-600">
                            <CalendarIcon />
                            {formatDate(run.startTime)} at {formatTime(run.startTime)}
                        </div>
                        <div className="flex items-center gap-2 text-sm text-gray-600">
                            <MapPinIcon />
                            {run.meetingPointName}
                        </div>
                        <div className="flex items-center gap-2 text-sm text-gray-600">
                            <UsersIcon />
                            {run.participants.filter(p => p.status === 'accepted').length + 1}/{run.maxParticipants} runners
                            {run.wingIt && ' • Wing it!'}
                        </div>
                    </div>
                    
                    <div className="flex gap-2">
                        {!isOwner && !hasJoined && !isFull && (
                            <button
                                onClick={() => onJoin(run)}
                                className="flex-1 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm"
                            >
                                Ask to Join
                            </button>
                        )}
                        {hasJoined && (
                            <div className="flex-1 px-3 py-2 bg-green-100 text-green-700 rounded-lg text-sm text-center">
                                <CheckIcon className="inline mr-1" />
                                Joined
                            </div>
                        )}
                        {isFull && !hasJoined && !isOwner && (
                            <div className="flex-1 px-3 py-2 bg-gray-100 text-gray-600 rounded-lg text-sm text-center">
                                Full
                            </div>
                        )}
                        <button
                            onClick={() => onViewDetails(run)}
                            className="px-3 py-2 text-blue-600 hover:bg-blue-50 rounded-lg text-sm"
                        >
                            View Details
                        </button>
                    </div>
                </div>
            );
        };

        const SimpleMap = ({ runs, selectedRun, onRunClick }) => {
            return (
                <div className="map-container">
                    <img 
                        src="https://api.mapbox.com/styles/v1/mapbox/light-v10/static/-0.1278,51.5074,11,0/800x600?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw"
                        alt="London Map"
                        className="w-full h-full object-cover"
                    />
                    
                    {/* Overlay with run markers */}
                    <div className="absolute inset-0">
                        {runs.map(run => {
                            // Calculate approximate position on map
                            const left = `${50 + (run.meetingPoint.lng + 0.1278) * 300}%`;
                            const top = `${50 - (run.meetingPoint.lat - 51.5074) * 400}%`;
                            
                            return (
                                <div
                                    key={run.id}
                                    className={`run-marker ${run.status}`}
                                    style={{ 
                                        position: 'absolute',
                                        left, 
                                        top,
                                        transform: 'translate(-50%, -50%)'
                                    }}
                                    onClick={() => onRunClick(run)}
                                >
                                    <PlayIcon />
                                </div>
                            );
                        })}
                    </div>
                </div>
            );
        };

        const MainApp = () => {
            const { user, logout } = useAuth();
            const [runs, setRuns] = useState(mockRuns);
            const [selectedRun, setSelectedRun] = useState(null);
            const [view, setView] = useState('map');
            
            return (
                <div className="h-screen bg-gray-50 flex flex-col">
                    {/* Header */}
                    <header className="bg-white shadow-sm">
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                            <div className="flex justify-between items-center h-16">
                                <div className="flex items-center gap-4">
                                    <h1 className="text-xl font-bold text-gray-900">The Run Club</h1>
                                    <nav className="hidden md:flex gap-4">
                                        <button
                                            onClick={() => setView('map')}
                                            className={`px-3 py-2 text-sm font-medium rounded-lg ${
                                                view === 'map' ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:text-gray-900'
                                            }`}
                                        >
                                            Map
                                        </button>
                                        <button
                                            onClick={() => setView('list')}
                                            className={`px-3 py-2 text-sm font-medium rounded-lg ${
                                                view === 'list' ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:text-gray-900'
                                            }`}
                                        >
                                            List
                                        </button>
                                    </nav>
                                </div>
                                
                                <div className="flex items-center gap-4">
                                    <button
                                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2"
                                    >
                                        <PlusIcon />
                                        Create Run
                                    </button>
                                    
                                    <div className="flex items-center gap-3">
                                        <img
                                            src={user.avatar}
                                            alt={user.name}
                                            className="w-8 h-8 rounded-full"
                                        />
                                        <button
                                            onClick={logout}
                                            className="text-sm text-gray-600 hover:text-gray-900"
                                        >
                                            Sign out
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </header>
                    
                    {/* Main Content */}
                    <main className="flex-1 overflow-hidden">
                        {view === 'map' ? (
                            <div className="h-full flex">
                                <div className="flex-1">
                                    <SimpleMap
                                        runs={runs}
                                        selectedRun={selectedRun}
                                        onRunClick={setSelectedRun}
                                    />
                                </div>
                                
                                <div className="w-96 bg-white border-l overflow-y-auto">
                                    <div className="p-4">
                                        <h2 className="text-lg font-semibold mb-4">Upcoming Runs</h2>
                                        <div className="space-y-3">
                                            {runs.map(run => (
                                                <RunCard
                                                    key={run.id}
                                                    run={run}
                                                    onJoin={() => alert('Join functionality would open dialog')}
                                                    onViewDetails={() => alert('View details would open modal')}
                                                />
                                            ))}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ) : (
                            <div className="max-w-4xl mx-auto p-6">
                                <h2 className="text-2xl font-bold mb-6">All Runs</h2>
                                <div className="grid gap-4">
                                    {runs.map(run => (
                                        <RunCard
                                            key={run.id}
                                            run={run}
                                            onJoin={() => alert('Join functionality would open dialog')}
                                            onViewDetails={() => alert('View details would open modal')}
                                        />
                                    ))}
                                </div>
                            </div>
                        )}
                    </main>
                </div>
            );
        };

        // Main App Component
        const App = () => {
            const [safetyAccepted, setSafetyAccepted] = useState(false);
            
            return (
                <AuthProvider>
                    <AuthContext.Consumer>
                        {({ user }) => (
                            <>
                                {!safetyAccepted && (
                                    <SafetyGate onAccept={() => setSafetyAccepted(true)} />
                                )}
                                {safetyAccepted && !user && <LoginScreen />}
                                {safetyAccepted && user && <MainApp />}
                            </>
                        )}
                    </AuthContext.Consumer>
                </AuthProvider>
            );
        };

        // Render the app
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
 
